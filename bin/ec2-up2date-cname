#!/usr/bin/perl
#
# DO NOT USE YOUR OWN ACCESS/SECRET KEY. USE IAM AND RESTRICT PRIVS.
#
use warnings;
use strict;

use Carp;
use LWP::UserAgent;
use WebService::Amazon::Route53;

my $ua = LWP::UserAgent->new;
my $metadata_url = "http://169.254.169.254/latest";
my $user_data = get_user_data();
my ($access_key, $secret_key) = get_credential_keys($user_data);

my $ttl = 60;
my $name = get_name($user_data);
my $public_hostname = get_public_hostname();
my $zone_name = get_zone_name_from_name($name);

my $response;
my $r53 = WebService::Amazon::Route53->new(id  => $access_key,
                                           key => $secret_key);

my $zone = $r53->find_hosted_zone(name => $zone_name);

if (!defined $zone || !$zone) {
  die "failed to find zone $zone_name.";
}

print "FETCH $name CNAME $public_hostname\n";

my $rr_sets = $r53->list_resource_record_sets(
  zone_id   => $zone->{'id'},
  name      => $name,
  type      => 'CNAME',
);
my @record_sets = grep { $_->{'name'} eq $name } @{$rr_sets};

# create CNAME RR if there is no CNAME RR
if (!@record_sets) {
  if (scalar (keys %{$r53->error}) == 0) {
    print "CREATE $name CNAME $public_hostname\n";
    $response = $r53->change_resource_record_sets(get_record_set());
    if (!defined $response) {
      die "failed to CREATE $name CNAME $public_hostname";
    }
  } else {
    die "failed to LIST $name CNAME";
  }
} else {
  # delete all existing CNAME RR to update CNAME RR by new public-hostname
  my $changes = [];
  foreach my $record_set (@record_sets) {
    foreach my $val (@{$record_set->{'records'}}) {
      push @$changes, {get_record_set(
        action => 'delete',
        name   => $record_set->{'name'},
        type   => $record_set->{'type'},
        ttl    => $record_set->{'ttl'},
        value  => $val,
      )};
    }
  }
  push @$changes, {get_record_set()};

  print "UPDATE $name CNAME $public_hostname\n";
  $response = $r53->change_resource_record_sets(
    zone_id => $zone->{'id'},
    changes => $changes
  );
  if (!defined $response) {
    die "failed to update. $name CNAME $public_hostname";
  }
}

print "$name CNAME $public_hostname successfully created/updated\n";


#=========================================================#
sub get_user_data {
  my $response = $ua->get($metadata_url . '/user-data');
  if ($response->is_success) {
    my @lines = split(/\n/, $response->decoded_content);
    return \@lines;
  } else {
    croak "failed to get user-data";
  }
}

# return (access_key, secret_key)
sub get_credential_keys {
  my $user_data = shift;
  return ($$user_data[1], $$user_data[2]);
}

# return hostname points to public-hostname
sub get_name {
  my $user_data = shift;
  return $$user_data[0] . ".";
}

sub get_public_hostname {
  my $response = $ua->get($metadata_url . '/meta-data/public-hostname');
  if ($response->is_success) {
    return $response->decoded_content;
  } else {
    croak "failed to get public hostname";
  }
}

# use domain name as zone name
sub get_zone_name_from_name {
  my $name = shift;
  my ($hostname, $domain) = split(/\./, $name, 2);
  if ($domain eq '') {
    croak "failed to get domain name from $name";
  }
  return $domain;
}

sub get_record_set {
  my %args = @_;
  return (
    zone_id => $zone->{'id'},
    action  => $args{'action'} || 'create',
    name    => $args{'name'}   || $name,
    type    => $args{'type'}   || 'CNAME',
    ttl     => $args{'ttl'}    || $ttl,
    value   => $args{'value'}  || $public_hostname,
  );
}

BEGIN {
  $SIG{__DIE__} = sub {
    die @_ if $^S;
    print STDERR $r53->error->{'message'} . "\n";
  };
}
